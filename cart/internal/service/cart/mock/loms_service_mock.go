// Code generated by http://github.com/gojuno/minimock (v3.4.4). DO NOT EDIT.

package mock

//go:generate minimock -i github.com/CatMacales/route256/cart/internal/service/cart.LOMSService -o loms_service_mock.go -n LOMSServiceMock -p mock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/CatMacales/route256/cart/internal/domain/model"
	"github.com/gojuno/minimock/v3"
	"github.com/google/uuid"
)

// LOMSServiceMock implements mm_cart.LOMSService
type LOMSServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateOrder          func(ctx context.Context, u1 model.UserID, ia1 []model.Item) (u2 uuid.UUID, err error)
	funcCreateOrderOrigin    string
	inspectFuncCreateOrder   func(ctx context.Context, u1 model.UserID, ia1 []model.Item)
	afterCreateOrderCounter  uint64
	beforeCreateOrderCounter uint64
	CreateOrderMock          mLOMSServiceMockCreateOrder

	funcGetStockInfo          func(ctx context.Context, s1 model.Sku) (u1 uint64, err error)
	funcGetStockInfoOrigin    string
	inspectFuncGetStockInfo   func(ctx context.Context, s1 model.Sku)
	afterGetStockInfoCounter  uint64
	beforeGetStockInfoCounter uint64
	GetStockInfoMock          mLOMSServiceMockGetStockInfo
}

// NewLOMSServiceMock returns a mock for mm_cart.LOMSService
func NewLOMSServiceMock(t minimock.Tester) *LOMSServiceMock {
	m := &LOMSServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateOrderMock = mLOMSServiceMockCreateOrder{mock: m}
	m.CreateOrderMock.callArgs = []*LOMSServiceMockCreateOrderParams{}

	m.GetStockInfoMock = mLOMSServiceMockGetStockInfo{mock: m}
	m.GetStockInfoMock.callArgs = []*LOMSServiceMockGetStockInfoParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mLOMSServiceMockCreateOrder struct {
	optional           bool
	mock               *LOMSServiceMock
	defaultExpectation *LOMSServiceMockCreateOrderExpectation
	expectations       []*LOMSServiceMockCreateOrderExpectation

	callArgs []*LOMSServiceMockCreateOrderParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// LOMSServiceMockCreateOrderExpectation specifies expectation struct of the LOMSService.CreateOrder
type LOMSServiceMockCreateOrderExpectation struct {
	mock               *LOMSServiceMock
	params             *LOMSServiceMockCreateOrderParams
	paramPtrs          *LOMSServiceMockCreateOrderParamPtrs
	expectationOrigins LOMSServiceMockCreateOrderExpectationOrigins
	results            *LOMSServiceMockCreateOrderResults
	returnOrigin       string
	Counter            uint64
}

// LOMSServiceMockCreateOrderParams contains parameters of the LOMSService.CreateOrder
type LOMSServiceMockCreateOrderParams struct {
	ctx context.Context
	u1  model.UserID
	ia1 []model.Item
}

// LOMSServiceMockCreateOrderParamPtrs contains pointers to parameters of the LOMSService.CreateOrder
type LOMSServiceMockCreateOrderParamPtrs struct {
	ctx *context.Context
	u1  *model.UserID
	ia1 *[]model.Item
}

// LOMSServiceMockCreateOrderResults contains results of the LOMSService.CreateOrder
type LOMSServiceMockCreateOrderResults struct {
	u2  uuid.UUID
	err error
}

// LOMSServiceMockCreateOrderOrigins contains origins of expectations of the LOMSService.CreateOrder
type LOMSServiceMockCreateOrderExpectationOrigins struct {
	origin    string
	originCtx string
	originU1  string
	originIa1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateOrder *mLOMSServiceMockCreateOrder) Optional() *mLOMSServiceMockCreateOrder {
	mmCreateOrder.optional = true
	return mmCreateOrder
}

// Expect sets up expected params for LOMSService.CreateOrder
func (mmCreateOrder *mLOMSServiceMockCreateOrder) Expect(ctx context.Context, u1 model.UserID, ia1 []model.Item) *mLOMSServiceMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LOMSServiceMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LOMSServiceMockCreateOrderExpectation{}
	}

	if mmCreateOrder.defaultExpectation.paramPtrs != nil {
		mmCreateOrder.mock.t.Fatalf("LOMSServiceMock.CreateOrder mock is already set by ExpectParams functions")
	}

	mmCreateOrder.defaultExpectation.params = &LOMSServiceMockCreateOrderParams{ctx, u1, ia1}
	mmCreateOrder.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateOrder.expectations {
		if minimock.Equal(e.params, mmCreateOrder.defaultExpectation.params) {
			mmCreateOrder.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateOrder.defaultExpectation.params)
		}
	}

	return mmCreateOrder
}

// ExpectCtxParam1 sets up expected param ctx for LOMSService.CreateOrder
func (mmCreateOrder *mLOMSServiceMockCreateOrder) ExpectCtxParam1(ctx context.Context) *mLOMSServiceMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LOMSServiceMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LOMSServiceMockCreateOrderExpectation{}
	}

	if mmCreateOrder.defaultExpectation.params != nil {
		mmCreateOrder.mock.t.Fatalf("LOMSServiceMock.CreateOrder mock is already set by Expect")
	}

	if mmCreateOrder.defaultExpectation.paramPtrs == nil {
		mmCreateOrder.defaultExpectation.paramPtrs = &LOMSServiceMockCreateOrderParamPtrs{}
	}
	mmCreateOrder.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreateOrder.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreateOrder
}

// ExpectU1Param2 sets up expected param u1 for LOMSService.CreateOrder
func (mmCreateOrder *mLOMSServiceMockCreateOrder) ExpectU1Param2(u1 model.UserID) *mLOMSServiceMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LOMSServiceMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LOMSServiceMockCreateOrderExpectation{}
	}

	if mmCreateOrder.defaultExpectation.params != nil {
		mmCreateOrder.mock.t.Fatalf("LOMSServiceMock.CreateOrder mock is already set by Expect")
	}

	if mmCreateOrder.defaultExpectation.paramPtrs == nil {
		mmCreateOrder.defaultExpectation.paramPtrs = &LOMSServiceMockCreateOrderParamPtrs{}
	}
	mmCreateOrder.defaultExpectation.paramPtrs.u1 = &u1
	mmCreateOrder.defaultExpectation.expectationOrigins.originU1 = minimock.CallerInfo(1)

	return mmCreateOrder
}

// ExpectIa1Param3 sets up expected param ia1 for LOMSService.CreateOrder
func (mmCreateOrder *mLOMSServiceMockCreateOrder) ExpectIa1Param3(ia1 []model.Item) *mLOMSServiceMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LOMSServiceMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LOMSServiceMockCreateOrderExpectation{}
	}

	if mmCreateOrder.defaultExpectation.params != nil {
		mmCreateOrder.mock.t.Fatalf("LOMSServiceMock.CreateOrder mock is already set by Expect")
	}

	if mmCreateOrder.defaultExpectation.paramPtrs == nil {
		mmCreateOrder.defaultExpectation.paramPtrs = &LOMSServiceMockCreateOrderParamPtrs{}
	}
	mmCreateOrder.defaultExpectation.paramPtrs.ia1 = &ia1
	mmCreateOrder.defaultExpectation.expectationOrigins.originIa1 = minimock.CallerInfo(1)

	return mmCreateOrder
}

// Inspect accepts an inspector function that has same arguments as the LOMSService.CreateOrder
func (mmCreateOrder *mLOMSServiceMockCreateOrder) Inspect(f func(ctx context.Context, u1 model.UserID, ia1 []model.Item)) *mLOMSServiceMockCreateOrder {
	if mmCreateOrder.mock.inspectFuncCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("Inspect function is already set for LOMSServiceMock.CreateOrder")
	}

	mmCreateOrder.mock.inspectFuncCreateOrder = f

	return mmCreateOrder
}

// Return sets up results that will be returned by LOMSService.CreateOrder
func (mmCreateOrder *mLOMSServiceMockCreateOrder) Return(u2 uuid.UUID, err error) *LOMSServiceMock {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LOMSServiceMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LOMSServiceMockCreateOrderExpectation{mock: mmCreateOrder.mock}
	}
	mmCreateOrder.defaultExpectation.results = &LOMSServiceMockCreateOrderResults{u2, err}
	mmCreateOrder.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateOrder.mock
}

// Set uses given function f to mock the LOMSService.CreateOrder method
func (mmCreateOrder *mLOMSServiceMockCreateOrder) Set(f func(ctx context.Context, u1 model.UserID, ia1 []model.Item) (u2 uuid.UUID, err error)) *LOMSServiceMock {
	if mmCreateOrder.defaultExpectation != nil {
		mmCreateOrder.mock.t.Fatalf("Default expectation is already set for the LOMSService.CreateOrder method")
	}

	if len(mmCreateOrder.expectations) > 0 {
		mmCreateOrder.mock.t.Fatalf("Some expectations are already set for the LOMSService.CreateOrder method")
	}

	mmCreateOrder.mock.funcCreateOrder = f
	mmCreateOrder.mock.funcCreateOrderOrigin = minimock.CallerInfo(1)
	return mmCreateOrder.mock
}

// When sets expectation for the LOMSService.CreateOrder which will trigger the result defined by the following
// Then helper
func (mmCreateOrder *mLOMSServiceMockCreateOrder) When(ctx context.Context, u1 model.UserID, ia1 []model.Item) *LOMSServiceMockCreateOrderExpectation {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LOMSServiceMock.CreateOrder mock is already set by Set")
	}

	expectation := &LOMSServiceMockCreateOrderExpectation{
		mock:               mmCreateOrder.mock,
		params:             &LOMSServiceMockCreateOrderParams{ctx, u1, ia1},
		expectationOrigins: LOMSServiceMockCreateOrderExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateOrder.expectations = append(mmCreateOrder.expectations, expectation)
	return expectation
}

// Then sets up LOMSService.CreateOrder return parameters for the expectation previously defined by the When method
func (e *LOMSServiceMockCreateOrderExpectation) Then(u2 uuid.UUID, err error) *LOMSServiceMock {
	e.results = &LOMSServiceMockCreateOrderResults{u2, err}
	return e.mock
}

// Times sets number of times LOMSService.CreateOrder should be invoked
func (mmCreateOrder *mLOMSServiceMockCreateOrder) Times(n uint64) *mLOMSServiceMockCreateOrder {
	if n == 0 {
		mmCreateOrder.mock.t.Fatalf("Times of LOMSServiceMock.CreateOrder mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateOrder.expectedInvocations, n)
	mmCreateOrder.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateOrder
}

func (mmCreateOrder *mLOMSServiceMockCreateOrder) invocationsDone() bool {
	if len(mmCreateOrder.expectations) == 0 && mmCreateOrder.defaultExpectation == nil && mmCreateOrder.mock.funcCreateOrder == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateOrder.mock.afterCreateOrderCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateOrder.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateOrder implements mm_cart.LOMSService
func (mmCreateOrder *LOMSServiceMock) CreateOrder(ctx context.Context, u1 model.UserID, ia1 []model.Item) (u2 uuid.UUID, err error) {
	mm_atomic.AddUint64(&mmCreateOrder.beforeCreateOrderCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateOrder.afterCreateOrderCounter, 1)

	mmCreateOrder.t.Helper()

	if mmCreateOrder.inspectFuncCreateOrder != nil {
		mmCreateOrder.inspectFuncCreateOrder(ctx, u1, ia1)
	}

	mm_params := LOMSServiceMockCreateOrderParams{ctx, u1, ia1}

	// Record call args
	mmCreateOrder.CreateOrderMock.mutex.Lock()
	mmCreateOrder.CreateOrderMock.callArgs = append(mmCreateOrder.CreateOrderMock.callArgs, &mm_params)
	mmCreateOrder.CreateOrderMock.mutex.Unlock()

	for _, e := range mmCreateOrder.CreateOrderMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.u2, e.results.err
		}
	}

	if mmCreateOrder.CreateOrderMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateOrder.CreateOrderMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateOrder.CreateOrderMock.defaultExpectation.params
		mm_want_ptrs := mmCreateOrder.CreateOrderMock.defaultExpectation.paramPtrs

		mm_got := LOMSServiceMockCreateOrderParams{ctx, u1, ia1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateOrder.t.Errorf("LOMSServiceMock.CreateOrder got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateOrder.CreateOrderMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.u1 != nil && !minimock.Equal(*mm_want_ptrs.u1, mm_got.u1) {
				mmCreateOrder.t.Errorf("LOMSServiceMock.CreateOrder got unexpected parameter u1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateOrder.CreateOrderMock.defaultExpectation.expectationOrigins.originU1, *mm_want_ptrs.u1, mm_got.u1, minimock.Diff(*mm_want_ptrs.u1, mm_got.u1))
			}

			if mm_want_ptrs.ia1 != nil && !minimock.Equal(*mm_want_ptrs.ia1, mm_got.ia1) {
				mmCreateOrder.t.Errorf("LOMSServiceMock.CreateOrder got unexpected parameter ia1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateOrder.CreateOrderMock.defaultExpectation.expectationOrigins.originIa1, *mm_want_ptrs.ia1, mm_got.ia1, minimock.Diff(*mm_want_ptrs.ia1, mm_got.ia1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateOrder.t.Errorf("LOMSServiceMock.CreateOrder got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateOrder.CreateOrderMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateOrder.CreateOrderMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateOrder.t.Fatal("No results are set for the LOMSServiceMock.CreateOrder")
		}
		return (*mm_results).u2, (*mm_results).err
	}
	if mmCreateOrder.funcCreateOrder != nil {
		return mmCreateOrder.funcCreateOrder(ctx, u1, ia1)
	}
	mmCreateOrder.t.Fatalf("Unexpected call to LOMSServiceMock.CreateOrder. %v %v %v", ctx, u1, ia1)
	return
}

// CreateOrderAfterCounter returns a count of finished LOMSServiceMock.CreateOrder invocations
func (mmCreateOrder *LOMSServiceMock) CreateOrderAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrder.afterCreateOrderCounter)
}

// CreateOrderBeforeCounter returns a count of LOMSServiceMock.CreateOrder invocations
func (mmCreateOrder *LOMSServiceMock) CreateOrderBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrder.beforeCreateOrderCounter)
}

// Calls returns a list of arguments used in each call to LOMSServiceMock.CreateOrder.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateOrder *mLOMSServiceMockCreateOrder) Calls() []*LOMSServiceMockCreateOrderParams {
	mmCreateOrder.mutex.RLock()

	argCopy := make([]*LOMSServiceMockCreateOrderParams, len(mmCreateOrder.callArgs))
	copy(argCopy, mmCreateOrder.callArgs)

	mmCreateOrder.mutex.RUnlock()

	return argCopy
}

// MinimockCreateOrderDone returns true if the count of the CreateOrder invocations corresponds
// the number of defined expectations
func (m *LOMSServiceMock) MinimockCreateOrderDone() bool {
	if m.CreateOrderMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateOrderMock.invocationsDone()
}

// MinimockCreateOrderInspect logs each unmet expectation
func (m *LOMSServiceMock) MinimockCreateOrderInspect() {
	for _, e := range m.CreateOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LOMSServiceMock.CreateOrder at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateOrderCounter := mm_atomic.LoadUint64(&m.afterCreateOrderCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateOrderMock.defaultExpectation != nil && afterCreateOrderCounter < 1 {
		if m.CreateOrderMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to LOMSServiceMock.CreateOrder at\n%s", m.CreateOrderMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to LOMSServiceMock.CreateOrder at\n%s with params: %#v", m.CreateOrderMock.defaultExpectation.expectationOrigins.origin, *m.CreateOrderMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateOrder != nil && afterCreateOrderCounter < 1 {
		m.t.Errorf("Expected call to LOMSServiceMock.CreateOrder at\n%s", m.funcCreateOrderOrigin)
	}

	if !m.CreateOrderMock.invocationsDone() && afterCreateOrderCounter > 0 {
		m.t.Errorf("Expected %d calls to LOMSServiceMock.CreateOrder at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateOrderMock.expectedInvocations), m.CreateOrderMock.expectedInvocationsOrigin, afterCreateOrderCounter)
	}
}

type mLOMSServiceMockGetStockInfo struct {
	optional           bool
	mock               *LOMSServiceMock
	defaultExpectation *LOMSServiceMockGetStockInfoExpectation
	expectations       []*LOMSServiceMockGetStockInfoExpectation

	callArgs []*LOMSServiceMockGetStockInfoParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// LOMSServiceMockGetStockInfoExpectation specifies expectation struct of the LOMSService.GetStockInfo
type LOMSServiceMockGetStockInfoExpectation struct {
	mock               *LOMSServiceMock
	params             *LOMSServiceMockGetStockInfoParams
	paramPtrs          *LOMSServiceMockGetStockInfoParamPtrs
	expectationOrigins LOMSServiceMockGetStockInfoExpectationOrigins
	results            *LOMSServiceMockGetStockInfoResults
	returnOrigin       string
	Counter            uint64
}

// LOMSServiceMockGetStockInfoParams contains parameters of the LOMSService.GetStockInfo
type LOMSServiceMockGetStockInfoParams struct {
	ctx context.Context
	s1  model.Sku
}

// LOMSServiceMockGetStockInfoParamPtrs contains pointers to parameters of the LOMSService.GetStockInfo
type LOMSServiceMockGetStockInfoParamPtrs struct {
	ctx *context.Context
	s1  *model.Sku
}

// LOMSServiceMockGetStockInfoResults contains results of the LOMSService.GetStockInfo
type LOMSServiceMockGetStockInfoResults struct {
	u1  uint64
	err error
}

// LOMSServiceMockGetStockInfoOrigins contains origins of expectations of the LOMSService.GetStockInfo
type LOMSServiceMockGetStockInfoExpectationOrigins struct {
	origin    string
	originCtx string
	originS1  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetStockInfo *mLOMSServiceMockGetStockInfo) Optional() *mLOMSServiceMockGetStockInfo {
	mmGetStockInfo.optional = true
	return mmGetStockInfo
}

// Expect sets up expected params for LOMSService.GetStockInfo
func (mmGetStockInfo *mLOMSServiceMockGetStockInfo) Expect(ctx context.Context, s1 model.Sku) *mLOMSServiceMockGetStockInfo {
	if mmGetStockInfo.mock.funcGetStockInfo != nil {
		mmGetStockInfo.mock.t.Fatalf("LOMSServiceMock.GetStockInfo mock is already set by Set")
	}

	if mmGetStockInfo.defaultExpectation == nil {
		mmGetStockInfo.defaultExpectation = &LOMSServiceMockGetStockInfoExpectation{}
	}

	if mmGetStockInfo.defaultExpectation.paramPtrs != nil {
		mmGetStockInfo.mock.t.Fatalf("LOMSServiceMock.GetStockInfo mock is already set by ExpectParams functions")
	}

	mmGetStockInfo.defaultExpectation.params = &LOMSServiceMockGetStockInfoParams{ctx, s1}
	mmGetStockInfo.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetStockInfo.expectations {
		if minimock.Equal(e.params, mmGetStockInfo.defaultExpectation.params) {
			mmGetStockInfo.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetStockInfo.defaultExpectation.params)
		}
	}

	return mmGetStockInfo
}

// ExpectCtxParam1 sets up expected param ctx for LOMSService.GetStockInfo
func (mmGetStockInfo *mLOMSServiceMockGetStockInfo) ExpectCtxParam1(ctx context.Context) *mLOMSServiceMockGetStockInfo {
	if mmGetStockInfo.mock.funcGetStockInfo != nil {
		mmGetStockInfo.mock.t.Fatalf("LOMSServiceMock.GetStockInfo mock is already set by Set")
	}

	if mmGetStockInfo.defaultExpectation == nil {
		mmGetStockInfo.defaultExpectation = &LOMSServiceMockGetStockInfoExpectation{}
	}

	if mmGetStockInfo.defaultExpectation.params != nil {
		mmGetStockInfo.mock.t.Fatalf("LOMSServiceMock.GetStockInfo mock is already set by Expect")
	}

	if mmGetStockInfo.defaultExpectation.paramPtrs == nil {
		mmGetStockInfo.defaultExpectation.paramPtrs = &LOMSServiceMockGetStockInfoParamPtrs{}
	}
	mmGetStockInfo.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetStockInfo.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetStockInfo
}

// ExpectS1Param2 sets up expected param s1 for LOMSService.GetStockInfo
func (mmGetStockInfo *mLOMSServiceMockGetStockInfo) ExpectS1Param2(s1 model.Sku) *mLOMSServiceMockGetStockInfo {
	if mmGetStockInfo.mock.funcGetStockInfo != nil {
		mmGetStockInfo.mock.t.Fatalf("LOMSServiceMock.GetStockInfo mock is already set by Set")
	}

	if mmGetStockInfo.defaultExpectation == nil {
		mmGetStockInfo.defaultExpectation = &LOMSServiceMockGetStockInfoExpectation{}
	}

	if mmGetStockInfo.defaultExpectation.params != nil {
		mmGetStockInfo.mock.t.Fatalf("LOMSServiceMock.GetStockInfo mock is already set by Expect")
	}

	if mmGetStockInfo.defaultExpectation.paramPtrs == nil {
		mmGetStockInfo.defaultExpectation.paramPtrs = &LOMSServiceMockGetStockInfoParamPtrs{}
	}
	mmGetStockInfo.defaultExpectation.paramPtrs.s1 = &s1
	mmGetStockInfo.defaultExpectation.expectationOrigins.originS1 = minimock.CallerInfo(1)

	return mmGetStockInfo
}

// Inspect accepts an inspector function that has same arguments as the LOMSService.GetStockInfo
func (mmGetStockInfo *mLOMSServiceMockGetStockInfo) Inspect(f func(ctx context.Context, s1 model.Sku)) *mLOMSServiceMockGetStockInfo {
	if mmGetStockInfo.mock.inspectFuncGetStockInfo != nil {
		mmGetStockInfo.mock.t.Fatalf("Inspect function is already set for LOMSServiceMock.GetStockInfo")
	}

	mmGetStockInfo.mock.inspectFuncGetStockInfo = f

	return mmGetStockInfo
}

// Return sets up results that will be returned by LOMSService.GetStockInfo
func (mmGetStockInfo *mLOMSServiceMockGetStockInfo) Return(u1 uint64, err error) *LOMSServiceMock {
	if mmGetStockInfo.mock.funcGetStockInfo != nil {
		mmGetStockInfo.mock.t.Fatalf("LOMSServiceMock.GetStockInfo mock is already set by Set")
	}

	if mmGetStockInfo.defaultExpectation == nil {
		mmGetStockInfo.defaultExpectation = &LOMSServiceMockGetStockInfoExpectation{mock: mmGetStockInfo.mock}
	}
	mmGetStockInfo.defaultExpectation.results = &LOMSServiceMockGetStockInfoResults{u1, err}
	mmGetStockInfo.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetStockInfo.mock
}

// Set uses given function f to mock the LOMSService.GetStockInfo method
func (mmGetStockInfo *mLOMSServiceMockGetStockInfo) Set(f func(ctx context.Context, s1 model.Sku) (u1 uint64, err error)) *LOMSServiceMock {
	if mmGetStockInfo.defaultExpectation != nil {
		mmGetStockInfo.mock.t.Fatalf("Default expectation is already set for the LOMSService.GetStockInfo method")
	}

	if len(mmGetStockInfo.expectations) > 0 {
		mmGetStockInfo.mock.t.Fatalf("Some expectations are already set for the LOMSService.GetStockInfo method")
	}

	mmGetStockInfo.mock.funcGetStockInfo = f
	mmGetStockInfo.mock.funcGetStockInfoOrigin = minimock.CallerInfo(1)
	return mmGetStockInfo.mock
}

// When sets expectation for the LOMSService.GetStockInfo which will trigger the result defined by the following
// Then helper
func (mmGetStockInfo *mLOMSServiceMockGetStockInfo) When(ctx context.Context, s1 model.Sku) *LOMSServiceMockGetStockInfoExpectation {
	if mmGetStockInfo.mock.funcGetStockInfo != nil {
		mmGetStockInfo.mock.t.Fatalf("LOMSServiceMock.GetStockInfo mock is already set by Set")
	}

	expectation := &LOMSServiceMockGetStockInfoExpectation{
		mock:               mmGetStockInfo.mock,
		params:             &LOMSServiceMockGetStockInfoParams{ctx, s1},
		expectationOrigins: LOMSServiceMockGetStockInfoExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetStockInfo.expectations = append(mmGetStockInfo.expectations, expectation)
	return expectation
}

// Then sets up LOMSService.GetStockInfo return parameters for the expectation previously defined by the When method
func (e *LOMSServiceMockGetStockInfoExpectation) Then(u1 uint64, err error) *LOMSServiceMock {
	e.results = &LOMSServiceMockGetStockInfoResults{u1, err}
	return e.mock
}

// Times sets number of times LOMSService.GetStockInfo should be invoked
func (mmGetStockInfo *mLOMSServiceMockGetStockInfo) Times(n uint64) *mLOMSServiceMockGetStockInfo {
	if n == 0 {
		mmGetStockInfo.mock.t.Fatalf("Times of LOMSServiceMock.GetStockInfo mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetStockInfo.expectedInvocations, n)
	mmGetStockInfo.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetStockInfo
}

func (mmGetStockInfo *mLOMSServiceMockGetStockInfo) invocationsDone() bool {
	if len(mmGetStockInfo.expectations) == 0 && mmGetStockInfo.defaultExpectation == nil && mmGetStockInfo.mock.funcGetStockInfo == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetStockInfo.mock.afterGetStockInfoCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetStockInfo.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetStockInfo implements mm_cart.LOMSService
func (mmGetStockInfo *LOMSServiceMock) GetStockInfo(ctx context.Context, s1 model.Sku) (u1 uint64, err error) {
	mm_atomic.AddUint64(&mmGetStockInfo.beforeGetStockInfoCounter, 1)
	defer mm_atomic.AddUint64(&mmGetStockInfo.afterGetStockInfoCounter, 1)

	mmGetStockInfo.t.Helper()

	if mmGetStockInfo.inspectFuncGetStockInfo != nil {
		mmGetStockInfo.inspectFuncGetStockInfo(ctx, s1)
	}

	mm_params := LOMSServiceMockGetStockInfoParams{ctx, s1}

	// Record call args
	mmGetStockInfo.GetStockInfoMock.mutex.Lock()
	mmGetStockInfo.GetStockInfoMock.callArgs = append(mmGetStockInfo.GetStockInfoMock.callArgs, &mm_params)
	mmGetStockInfo.GetStockInfoMock.mutex.Unlock()

	for _, e := range mmGetStockInfo.GetStockInfoMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.u1, e.results.err
		}
	}

	if mmGetStockInfo.GetStockInfoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetStockInfo.GetStockInfoMock.defaultExpectation.Counter, 1)
		mm_want := mmGetStockInfo.GetStockInfoMock.defaultExpectation.params
		mm_want_ptrs := mmGetStockInfo.GetStockInfoMock.defaultExpectation.paramPtrs

		mm_got := LOMSServiceMockGetStockInfoParams{ctx, s1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetStockInfo.t.Errorf("LOMSServiceMock.GetStockInfo got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetStockInfo.GetStockInfoMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.s1 != nil && !minimock.Equal(*mm_want_ptrs.s1, mm_got.s1) {
				mmGetStockInfo.t.Errorf("LOMSServiceMock.GetStockInfo got unexpected parameter s1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetStockInfo.GetStockInfoMock.defaultExpectation.expectationOrigins.originS1, *mm_want_ptrs.s1, mm_got.s1, minimock.Diff(*mm_want_ptrs.s1, mm_got.s1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetStockInfo.t.Errorf("LOMSServiceMock.GetStockInfo got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetStockInfo.GetStockInfoMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetStockInfo.GetStockInfoMock.defaultExpectation.results
		if mm_results == nil {
			mmGetStockInfo.t.Fatal("No results are set for the LOMSServiceMock.GetStockInfo")
		}
		return (*mm_results).u1, (*mm_results).err
	}
	if mmGetStockInfo.funcGetStockInfo != nil {
		return mmGetStockInfo.funcGetStockInfo(ctx, s1)
	}
	mmGetStockInfo.t.Fatalf("Unexpected call to LOMSServiceMock.GetStockInfo. %v %v", ctx, s1)
	return
}

// GetStockInfoAfterCounter returns a count of finished LOMSServiceMock.GetStockInfo invocations
func (mmGetStockInfo *LOMSServiceMock) GetStockInfoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStockInfo.afterGetStockInfoCounter)
}

// GetStockInfoBeforeCounter returns a count of LOMSServiceMock.GetStockInfo invocations
func (mmGetStockInfo *LOMSServiceMock) GetStockInfoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStockInfo.beforeGetStockInfoCounter)
}

// Calls returns a list of arguments used in each call to LOMSServiceMock.GetStockInfo.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetStockInfo *mLOMSServiceMockGetStockInfo) Calls() []*LOMSServiceMockGetStockInfoParams {
	mmGetStockInfo.mutex.RLock()

	argCopy := make([]*LOMSServiceMockGetStockInfoParams, len(mmGetStockInfo.callArgs))
	copy(argCopy, mmGetStockInfo.callArgs)

	mmGetStockInfo.mutex.RUnlock()

	return argCopy
}

// MinimockGetStockInfoDone returns true if the count of the GetStockInfo invocations corresponds
// the number of defined expectations
func (m *LOMSServiceMock) MinimockGetStockInfoDone() bool {
	if m.GetStockInfoMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetStockInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetStockInfoMock.invocationsDone()
}

// MinimockGetStockInfoInspect logs each unmet expectation
func (m *LOMSServiceMock) MinimockGetStockInfoInspect() {
	for _, e := range m.GetStockInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LOMSServiceMock.GetStockInfo at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetStockInfoCounter := mm_atomic.LoadUint64(&m.afterGetStockInfoCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetStockInfoMock.defaultExpectation != nil && afterGetStockInfoCounter < 1 {
		if m.GetStockInfoMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to LOMSServiceMock.GetStockInfo at\n%s", m.GetStockInfoMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to LOMSServiceMock.GetStockInfo at\n%s with params: %#v", m.GetStockInfoMock.defaultExpectation.expectationOrigins.origin, *m.GetStockInfoMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStockInfo != nil && afterGetStockInfoCounter < 1 {
		m.t.Errorf("Expected call to LOMSServiceMock.GetStockInfo at\n%s", m.funcGetStockInfoOrigin)
	}

	if !m.GetStockInfoMock.invocationsDone() && afterGetStockInfoCounter > 0 {
		m.t.Errorf("Expected %d calls to LOMSServiceMock.GetStockInfo at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetStockInfoMock.expectedInvocations), m.GetStockInfoMock.expectedInvocationsOrigin, afterGetStockInfoCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *LOMSServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateOrderInspect()

			m.MinimockGetStockInfoInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *LOMSServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *LOMSServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateOrderDone() &&
		m.MinimockGetStockInfoDone()
}
