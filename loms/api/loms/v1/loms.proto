syntax = "proto3";

package route256.loms.pkg.loms.v1;

option go_package = "github.com/CatMacales/route256/loms/pkg/api/loms/v1;loms";

import "validate/validate.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "LOMS API";
    description: "API for LOMS";
    version: "1.0.0";
  };
  schemes: HTTP;
  consumes: "application/json";
  produces: "application/json";
};

service LOMS{
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "LOMS service",
  };

  rpc CreateOrder(CreateOrderRequest) returns (CreateOrderResponse){
    option (google.api.http) = {
      post: "/v1/orders/create",
      body: "items"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a new order"
      description: "Creates a new order with the specified items for a user."
      tags: "Orders"
    };
  }

  rpc GetOrderInfo(GetOrderInfoRequest) returns (GetOrderInfoResponse){
    option (google.api.http) = {
      get: "/v1/orders/{order_id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get order information"
      description: "Retrieves information about a specific order using its ID."
      tags: "Orders"
    };
  }

  rpc PayOrder(PayOrderRequest) returns (PayOrderResponse){
    option (google.api.http) = {
      post: "/v1/orders/{order_id}/pay"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Pay for an order"
      description: "Processes payment for a specified order."
      tags: "Orders"
    };
  }

  rpc CancelOrder(CancelOrderRequest) returns (CancelOrderResponse){
    option (google.api.http) = {
      post: "/v1/orders/{order_id}/cancel"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Cancel an order"
      description: "Cancels a specified order."
      tags: "Orders"
    };
  }

  rpc GetStockInfo(GetStockInfoRequest) returns (GetStockInfoResponse){
    option (google.api.http) = {
      get: "/v1/stocks/{sku}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get stock information"
      description: "Retrieves stock information for a specific SKU."
      tags: "Stocks"
    };
  }
}

message CreateOrderRequest{
  int64 user_id = 1 [(validate.rules).int64.gt = 0];
  repeated Item items = 2 [(validate.rules).repeated.items.message.required = true];
}

message CreateOrderResponse{
  string order_id = 1;
}

message GetOrderInfoRequest{
  string order_id = 1[(validate.rules).string.uuid = true];
}

message GetOrderInfoResponse{
  OrderStatus status = 1;
  int64 user_id = 2;
  repeated Item items = 3;
}

message PayOrderRequest{
  string order_id = 1 [(validate.rules).string.uuid = true];
}

message PayOrderResponse{

}

message CancelOrderRequest{
  string order_id = 1 [(validate.rules).string.uuid = true];
}

message CancelOrderResponse{

}

message GetStockInfoRequest{
  uint32 sku = 1 [(validate.rules).uint32.gt = 0];
}

message GetStockInfoResponse{
  uint64 count = 1;
}

message Item{
  uint32 sku = 1 [(validate.rules).uint32.gt = 0];
  uint32 count = 2[(validate.rules).uint32 = {gt:0,lte:65535}];
}

enum OrderStatus {
  ORDER_STATUS_UNSPECIFIED = 0;
  ORDER_STATUS_NEW = 1;
  ORDER_STATUS_AWAITING_PAYMENT = 2;
  ORDER_STATUS_FAILED = 3;
  ORDER_STATUS_PAYED = 4;
  ORDER_STATUS_CANCELED = 5;
}
